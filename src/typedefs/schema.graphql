interface product {
    id: Int
    name: String
    precio: Float
    image: String
}

interface IUser {
    id: Int
    name: String
    email: String
    password: String
    phone: String
}
type User implements IUser {
    id: Int
    name: String
    email: String
    password: String
    phone: String
}

type client {
    id: Int
    name: String
    cedula: String
    nationality: String
    user_creator:Int
    phone:String
}
enum pay_method {
    EFECTIVO,
    DEBITO,
    TRANSFERENCIA,
    DOLARES,
    PESOS,
}

type order_products implements product {
    id: Int
    name: String
    precio: Float
    image: String
    materials_required: [MaterialsProduct]
    quantity: Int
}

type orders {
    id: Int
    pay_method: pay_method
    delivery_date: String
    note: String
    delivery_status: Boolean
    production_status: Boolean
    stage_status: Boolean
    abono: Float
    monto: Float
    total: Float
    client: client
    order_products: [order_products]
}
type MaterialsProduct {
    id: Int
    quantity:Float
    material:Material
}

type Material {
    id: Int
    nombre: String
    type:MaterialType

}
type MaterialType{
    id: Int
    type:String
}

type providers {
    id: Int
    name: String
    RIF: String
    phone: String
    direction: String
}

type Products implements product{
     id: Int
    name: String
    precio: Float
    image: String
    materials:[MaterialsProduct]
}


type store {
    id: Int
    material: Material
    provider: providers
    uniteds: Int
    expiration_date: String
    brand: String
    weight: Float
}

input UserInput {
    id: Int
    name: String
    email: String
    password: String
    phone: String
}

input clientInput {
     id: Int
    name: String!
    cedula: String!
    nationality: String!
    user_creator:Int!
    phone:String
}

input materialInput {
     id: Int
    nombre: String
    type_id: Int
}

input providerInput{
     id: Int
    name: String
    RIF: String
    phone: String
    direction: String
}

input storeInput {
    id: Int
    materials_id: Int
    provider_id: Int
    uniteds: Int
    expiration_date: String
    brand: String
    weight: Float
}

input materialProductInput{
     id:Int!
    quantity:Float!
}

input productsInput {
    name: String
    precio: Float
    image: String
    materials:[materialProductInput]
}

type Query {
    users: [User]
    user(id: Int!): User,
    loginUser(email: String!, password: String!): User
    client(id: Int!):client
    clients:[client]
    materialTypes:[MaterialType]
    materials:[Material]
    provider(id:Int!):providers
    providers:[providers]
    store(id:Int!):store
    storage:[store]
    products:[Products]
    product(id:Int!):Products
}

type Mutation {
    createUser(user: UserInput!): User
    editUser(user: UserInput!): User
    deleteUser(id: Int!): String
    createClient(client: clientInput): client
    editClient(client:clientInput ): client
    deleteClient(id:Int!): String
    createMaterial(material:materialInput):Material
    createMaterialType(type:String!):MaterialType
    
    createProvider(provider:providerInput):providers
    updateProvider(provider:providerInput):providers
    addToStore(store:storeInput):store
    updateStore(store:storeInput):store
    deleteStored(id:Int!):String
    createProduct(product:productsInput!):Products
    updateProduct(product:productsInput!):Products


    
}